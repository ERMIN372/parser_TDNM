from aiogram import types, Dispatcher
import aiogram
import os
from app.storage.repo import free_used_this_month, get_credits, is_unlimited_active

FREE_PER_MONTH = int(os.getenv("FREE_PER_MONTH", "3"))

async def cmd_status(message: types.Message):
    uid = message.from_user.id
    free_used = free_used_this_month(uid)
    free_left = max(0, FREE_PER_MONTH - free_used)
    credits = get_credits(uid)
    active, until = is_unlimited_active(uid)

    lines = [
        "üß≠ –°—Ç–∞—Ç—É—Å:",
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {FREE_PER_MONTH - free_left}/{FREE_PER_MONTH} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ‚Üí –æ—Å—Ç–∞–ª–æ—Å—å {free_left}",
        f"‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {credits}",
        f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç: {'–¥–æ ' + until.strftime('%Y-%m-%d %H:%M') + ' UTC' if active and until else '–Ω–µ—Ç'}",
        "",
        f"aiogram: {aiogram.__version__}",
    ]
    await message.reply("\n".join(lines))

def register(dp: Dispatcher):
    dp.register_message_handler(cmd_status, commands=["status"])
    # –∫–Ω–æ–ø–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    dp.register_message_handler(cmd_status, lambda m: m.text in {"üß≠ –°—Ç–∞—Ç—É—Å", "–°—Ç–∞—Ç—É—Å"}, state="*")
