from __future__ import annotations
import logging
from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.services import payments

log = logging.getLogger(__name__)

def _kb_packs() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("1 –∑–∞–ø—Ä–æ—Å ‚Äî 49 ‚ÇΩ", callback_data="pay_create:p1"),
        InlineKeyboardButton("3 –∑–∞–ø—Ä–æ—Å–∞ ‚Äî 139 ‚ÇΩ", callback_data="pay_create:p3"),
        InlineKeyboardButton("9 –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî 399 ‚ÇΩ", callback_data="pay_create:p9"),
        InlineKeyboardButton("–ë–µ–∑–ª–∏–º–∏—Ç 30 –¥–Ω–µ–π ‚Äî 1299 ‚ÇΩ", callback_data="pay_create:unlim30"),
    )
    return kb

async def cmd_buy(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:", reply_markup=_kb_packs())

async def cb_create(call: types.CallbackQuery):
    pack = call.data.split(":", 1)[1]
    me = await call.bot.get_me()
    try:
        pid, url = payments.create_payment(call.from_user.id, pack, bot_username=me.username)
    except Exception as e:
        log.exception("create_payment failed")
        await call.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url),
        InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"pay_check:{pid}"),
    )
    await call.message.reply(f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω: {payments.TITLES[pack]}.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.", reply_markup=kb)
    await call.answer()

async def cb_check(call: types.CallbackQuery):
    pid = call.data.split(":", 1)[1]
    try:
        msg = payments.check_and_apply(call.from_user.id, pid)
    except Exception:
        msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    await call.message.reply(msg)
    await call.answer()

async def start_with_payload(message: types.Message):
    payload = (message.get_args() or "").strip()
    if not payload.startswith("paid_"):
        return
    pid = payload.replace("paid_", "", 1)
    try:
        msg = payments.check_and_apply(message.from_user.id, pid)
    except Exception:
        msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    await message.reply(msg)

def register(dp: Dispatcher):
    dp.register_message_handler(cmd_buy, commands=["buy"])
    # –∫–Ω–æ–ø–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    dp.register_message_handler(cmd_buy, lambda m: m.text in {"üí≥ –ö—É–ø–∏—Ç—å", "–ö—É–ø–∏—Ç—å"}, state="*")
    dp.register_callback_query_handler(cb_create, lambda c: c.data and c.data.startswith("pay_create:"))
    dp.register_callback_query_handler(cb_check, lambda c: c.data and c.data.startswith("pay_check:"))
    dp.register_message_handler(start_with_payload, commands=["start"])
