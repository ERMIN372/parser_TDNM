from __future__ import annotations
import logging
from typing import Dict, Tuple

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    InputFile,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from ..services import parser_adapter
from ..services import validator  # –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞

log = logging.getLogger(__name__)

# –ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ¬´—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ¬ª –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: user_id -> (query, city, overrides)
_WARN_CACHE: Dict[int, Tuple[str, str, dict]] = {}


class ParseForm(StatesGroup):
    waiting_query = State()
    waiting_city = State()


def _parse_overrides(parts: list[str]) -> dict[str, object]:
    overrides: dict[str, object] = {}
    for part in parts:
        if "=" not in part:
            raise ValueError("–û–ø—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ key=value")
        key, value = [p.strip() for p in part.split("=", 1)]
        key = key.lower()
        if key == "pages":
            overrides["pages"] = int(value)
        elif key in {"per_page", "per-page"}:
            overrides["per_page"] = int(value)
        elif key == "pause":
            overrides["pause"] = float(value)
        elif key == "site":
            overrides["site"] = value.lower()
        elif key == "area":
            overrides["area"] = int(value)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: {key}")
    return overrides


async def _run_parser_bypass_validation(message: types.Message, query: str, city: str, overrides: dict):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ –¥–æ–ø. –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ø–æ –Ω–∞–∂–∞—Ç–∏—é ¬´–í—Å—ë —Ä–∞–≤–Ω–æ –∏—Å–∫–∞—Ç—å¬ª)."""
    await message.answer("–û–∫–µ–π, –∑–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1‚Äì2 –º–∏–Ω—É—Ç—ã‚Ä¶")
    try:
        path = await parser_adapter.run_report(
            message.from_user.id,
            query,
            city,
            role=query,
            **overrides,
        )
    except Exception as e:  # pragma: no cover
        logging.exception("parser failed")
        err_text = (str(e) or "").strip() or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç: –ø–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        await message.answer(err_text)
        return

    if path.exists():
        await message.answer_document(InputFile(path))
    else:
        await message.answer("–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


async def _run_parser(message: types.Message, query: str, city: str, overrides: dict[str, object]):
    # 1) –í–∞–ª–∏–¥–∞—Ü–∏—è: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∏ –¥–∞—ë–º –≤—ã–±–æ—Ä
    ok, norm_title, area_id, bad_msg = validator.validate_request(query, city)
    if not ok:
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(
            InlineKeyboardButton("‚úÖ –í—Å—ë —Ä–∞–≤–Ω–æ –∏—Å–∫–∞—Ç—å (—Å–ø–∏—Å–∞—Ç—å 1 –∫—Ä–µ–¥–∏—Ç)", callback_data="parse_force"),
            InlineKeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="parse_fix"),
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ¬´—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π¬ª –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –µ–≥–æ –∫–ª–∏–∫–∞
        _WARN_CACHE[message.from_user.id] = (query, city, overrides)
        await message.answer(
            bad_msg
            + "\n\n–ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω(–∞) ‚Äî –º–æ–≥—É –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫. "
              "–≠—Ç–æ –º–æ–∂–µ—Ç —Å–ø–∏—Å–∞—Ç—å 1 –∫—Ä–µ–¥–∏—Ç/–ª–∏–º–∏—Ç.",
            reply_markup=kb,
        )
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤—ã–±–µ—Ä–µ—Ç ¬´–ò—Å–ø—Ä–∞–≤–∏—Ç—å¬ª
        await ParseForm.waiting_query.set()
        return

    await message.answer("–°–æ–±–∏—Ä–∞—é –≤–∞–∫–∞–Ω—Å–∏–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1‚Äì2 –º–∏–Ω—É—Ç‚Ä¶")
    try:
        if "area" not in overrides:
            overrides["area"] = area_id

        path = await parser_adapter.run_report(
            message.from_user.id,
            norm_title,
            city,
            role=norm_title,
            **overrides,
        )
    except Exception as e:  # pragma: no cover
        logging.exception("parser failed")
        err_text = (str(e) or "").strip() or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç: –ø–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        await message.answer(err_text)
        return

    if path.exists():
        await message.answer_document(InputFile(path))
    else:
        await message.answer("–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


# ---------- /parse ----------
async def cmd_parse(message: types.Message, state: FSMContext):
    args = message.get_args()
    if args:
        raw_parts = [p.strip() for p in args.split(";") if p.strip()]
        if len(raw_parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /parse –¥–æ–ª–∂–Ω–æ—Å—Ç—å; –≥–æ—Ä–æ–¥; pages=1")
            return
        query, city, *rest = raw_parts
        overrides: dict[str, object] = {}
        if rest:
            try:
                overrides = _parse_overrides(rest)
            except ValueError as exc:
                await message.reply(str(exc))
                return
        await _run_parser(message, query, city, overrides)
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=ReplyKeyboardRemove())
    await ParseForm.waiting_query.set()


async def process_query(message: types.Message, state: FSMContext):
    await state.update_data(query=message.text.strip())
    await message.answer("–ì–æ—Ä–æ–¥?")
    await ParseForm.waiting_city.set()


async def process_city(message: types.Message, state: FSMContext):
    data = await state.get_data()
    query = data.get("query")
    city = message.text.strip()
    await state.finish()
    await _run_parser(message, query, city, {})


# ---------- callbacks –∏–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ----------
async def cb_parse_force(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø—É—Å–∫ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."""
    payload = _WARN_CACHE.pop(call.from_user.id, None)
    await call.answer()
    if not payload:
        await call.message.answer("–ù–µ –Ω–∞—à—ë–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –µ—â—ë —Ä–∞–∑:")
        await ParseForm.waiting_query.set()
        return
    query, city, overrides = payload
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å/–≥–æ—Ä–æ–¥
    try:
        await state.finish()
    except Exception:
        pass
    await _run_parser_bypass_validation(call.message, query, city, overrides)


async def cb_parse_fix(call: types.CallbackQuery):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å."""
    _WARN_CACHE.pop(call.from_user.id, None)
    await call.answer()
    await call.message.answer("–û–∫–µ–π! –í–≤–µ–¥–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –µ—â—ë —Ä–∞–∑:", reply_markup=ReplyKeyboardRemove())
    await ParseForm.waiting_query.set()


def register(dp: Dispatcher):
    # –∫–æ–º–∞–Ω–¥—ã –∏ –¥–∏–∞–ª–æ–≥
    dp.register_message_handler(cmd_parse, commands=["parse"], state="*")
    dp.register_message_handler(cmd_parse, lambda m: m.text == "üîé –ü–æ–∏—Å–∫", state="*")
    dp.register_message_handler(process_query, state=ParseForm.waiting_query)
    dp.register_message_handler(process_city, state=ParseForm.waiting_city)

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ –∏–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    dp.register_callback_query_handler(cb_parse_force, lambda c: c.data == "parse_force", state="*")
    dp.register_callback_query_handler(cb_parse_fix,   lambda c: c.data == "parse_fix",   state="*")
