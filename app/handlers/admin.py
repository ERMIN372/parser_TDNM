from __future__ import annotations
import os
import asyncio
from datetime import datetime
from typing import List, Tuple

from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, RetryAfter, MessageNotModified
from pathlib import Path

from app.storage import repo
from app.storage.models import User
from app.utils.backup import make_sqlite_backup

# --- –¥–æ—Å—Ç—É–ø ---
ADMINS = {int(x) for x in os.getenv("ADMIN_USER_IDS", "").replace(" ", "").split(",") if x.isdigit()}
def _guard(uid: int) -> bool: return uid in ADMINS

# --- –ø–∞–≥–∏–Ω–∞—Ü–∏—è ---
PAGE_SIZE = 10

def _kb_admin_home() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users:1"),
        InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_cast"),
    )
    kb.add(InlineKeyboardButton("üíæ –ë—ç–∫–∞–ø –ë–î", callback_data="admin_backup"))
    return kb

async def _safe_edit_text(message: types.Message, text: str, **kwargs) -> None:
    try:
        await message.edit_text(text, **kwargs)
    except MessageNotModified:
        pass


# message_id -> —Ü–µ–ª–µ–≤–æ–π user_id –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
_CAST_TARGETS: dict[int, int] = {}


def _users_page(page: int, q: str | None = None) -> Tuple[str, InlineKeyboardMarkup]:
    total = repo.count_users(q)
    pages = max(1, (total + PAGE_SIZE - 1) // PAGE_SIZE)
    page = max(1, min(page, pages))
    users: List[User] = repo.list_users(offset=(page-1)*PAGE_SIZE, limit=PAGE_SIZE, query=q)

    lines = [f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{pages} (–≤—Å–µ–≥–æ: {total})"]
    kb = InlineKeyboardMarkup(row_width=1)
    for u in users:
        credits = repo.get_credits(u.user_id)
        active, until = repo.is_unlimited_active(u.user_id)
        tag = "‚ôæ" if active else f"{credits}üí≥"
        title = f"{u.user_id} ‚Ä¢ @{u.username or '-'} ‚Ä¢ {u.full_name or '-'} ‚Ä¢ {tag}"
        kb.add(InlineKeyboardButton(title[:64], callback_data=f"admin_user:{u.user_id}"))

    nav = []
    if page > 1: nav.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"admin_users:{page-1}"))
    nav.append(InlineKeyboardButton("üîÑ", callback_data=f"admin_users:{page}"))
    if page < pages: nav.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"admin_users:{page+1}"))
    if nav: kb.row(*nav)

    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_home"))
    return ("\n".join(lines), kb)

def _kb_user(u: User) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=3)
    kb.row(
        InlineKeyboardButton("‚ôæ 7–¥", callback_data=f"admin_unlim:{u.user_id}:7"),
        InlineKeyboardButton("‚ôæ 30–¥", callback_data=f"admin_unlim:{u.user_id}:30"),
        InlineKeyboardButton("‚ôæ 90–¥", callback_data=f"admin_unlim:{u.user_id}:90"),
    )
    kb.row(
        InlineKeyboardButton("+1üí≥", callback_data=f"admin_credit:{u.user_id}:1"),
        InlineKeyboardButton("+3üí≥", callback_data=f"admin_credit:{u.user_id}:3"),
        InlineKeyboardButton("+9üí≥", callback_data=f"admin_credit:{u.user_id}:9"),
    )
    kb.row(
        InlineKeyboardButton("üîî –¢–æ—á–µ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data=f"admin_cast_user:{u.user_id}"),
    )
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_users:1"))
    return kb

def _user_card_text(u: User) -> str:
    credits = repo.get_credits(u.user_id)
    active, until = repo.is_unlimited_active(u.user_id)
    unlim = f"–¥–∞, –¥–æ {until:%Y-%m-%d %H:%M} UTC" if active and until else "–Ω–µ—Ç"
    return (
        "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n"
        f"ID: <code>{u.user_id}</code>\n"
        f"Username: @{u.username or '-'}\n"
        f"–ò–º—è: {u.full_name or '-'}\n"
        f"–ö—Ä–µ–¥–∏—Ç—ã: {credits}\n"
        f"–ë–µ–∑–ª–∏–º–∏—Ç: {unlim}\n"
    )

# -------- –∫–æ—Ä–Ω–µ–≤–æ–µ –º–µ–Ω—é / –∫–Ω–æ–ø–∫–∞ --------
async def admin_home(message: types.Message):
    if not _guard(message.from_user.id): return
    await message.reply("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=_kb_admin_home())

async def cb_admin_home(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    await _safe_edit_text(call.message, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=_kb_admin_home())
    await call.answer()

# -------- —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π --------
async def cb_users(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    _, payload = call.data.split(":")
    page = int(payload)
    text, kb = _users_page(page)
    await _safe_edit_text(call.message, text, reply_markup=kb)
    await call.answer()

# -------- –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è --------
async def cb_user(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    _, uid = call.data.split(":")
    u = repo.get_user(int(uid))
    if not u:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
    await _safe_edit_text(call.message, _user_card_text(u), reply_markup=_kb_user(u), parse_mode="HTML")
    await call.answer()

# -------- –¥–µ–π—Å—Ç–≤–∏—è: –±–µ–∑–ª–∏–º–∏—Ç/–∫—Ä–µ–¥–∏—Ç—ã --------
async def cb_unlim(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    _, uid, days = call.data.split(":")
    uid, days = int(uid), int(days)
    until = repo.set_unlimited(uid, days)
    await call.answer("–í—ã–¥–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç", show_alert=False)
    u = repo.get_user(uid)
    await _safe_edit_text(call.message, _user_card_text(u), reply_markup=_kb_user(u), parse_mode="HTML")

async def cb_credit(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    _, uid, n = call.data.split(":")
    uid, n = int(uid), int(n)
    bal = repo.add_credits(uid, n)
    await call.answer(f"+{n} –∫—Ä–µ–¥–∏—Ç(–æ–≤). –ë–∞–ª–∞–Ω—Å: {bal}", show_alert=False)
    u = repo.get_user(uid)
    await _safe_edit_text(call.message, _user_card_text(u), reply_markup=_kb_user(u), parse_mode="HTML")

# -------- —Ä–∞—Å—Å—ã–ª–∫–∏ --------
async def cb_cast_menu(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üì£ –†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)", callback_data="admin_cast_all"),
        InlineKeyboardButton("üîî –¢–æ—á–µ—á–Ω–æ (–ø–æ ID)", callback_data="admin_cast_prompt"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_home"),
    )
    await _safe_edit_text(
        call.message,
        "–†–∞—Å—Å—ã–ª–∫–∞:\n‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n‚Äî –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–µ—á–Ω—É—é –ø–æ ID",
        reply_markup=kb,
    )
    await call.answer()

# 0) —Ç–æ—á–µ—á–Ω–∞—è –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ö–ù–û–ü–ö–ê, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞)
async def cb_cast_user(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    _, uid = call.data.split(":")
    uid = int(uid)
    prompt = (
        f"–¢–æ—á–µ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code>.\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º ‚Äî –º—ã –ø–µ—Ä–µ—à–ª—ë–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        "–û—Ç–º–µ–Ω–∞: /cancel"
    )
    await _safe_edit_text(call.message, prompt, parse_mode="HTML")
    _CAST_TARGETS[call.message.message_id] = uid
    await call.answer()

# –ª–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ ¬´—Ç–æ—á–µ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <uid>¬ª
async def catch_reply_cast_user(message: types.Message):
    if not _guard(message.from_user.id): return
    if not message.reply_to_message: return
    uid = _CAST_TARGETS.get(message.reply_to_message.message_id)
    if uid is None:
        return
    text = message.html_text or message.text or ""
    if not text.strip():
        await message.reply("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
        return
    try:
        await message.bot.send_message(uid, text, parse_mode="HTML", disable_web_page_preview=True)
        await message.reply(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}")
    except (BotBlocked, ChatNotFound):
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except RetryAfter as e:
        await asyncio.sleep(e.timeout + 0.5)
        try:
            await message.bot.send_message(uid, text, parse_mode="HTML", disable_web_page_preview=True)
            await message.reply(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} (–ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏)")
        except Exception:
            await message.reply("‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    finally:
        _CAST_TARGETS.pop(message.reply_to_message.message_id, None)

# 1) –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –≤—Å–µ–º
async def cb_cast_all(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    await call.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await _safe_edit_text(
        call.message,
        "–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n–û—Ç–º–µ–Ω–∞: /cancel",
    )

async def catch_reply_broadcast_all(message: types.Message):
    if not _guard(message.from_user.id): return
    if not message.reply_to_message: return
    src = (message.reply_to_message.text or "") + (message.reply_to_message.caption or "")
    if "—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" not in src:
        return
    text = message.html_text or message.text
    ids = repo.get_all_user_ids()
    sent = ok = fail = 0
    for uid in ids:
        try:
            await message.bot.send_message(uid, text, parse_mode="HTML", disable_web_page_preview=True)
            ok += 1
        except (BotBlocked, ChatNotFound):
            fail += 1
        except RetryAfter as e:
            await asyncio.sleep(e.timeout + 0.5)
            continue
        except Exception:
            fail += 1
        finally:
            sent += 1
            await asyncio.sleep(0.05)
    await message.reply(f"–ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, —É—Å–ø–µ—à–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {fail}")

# 2) —Ç–æ—á–µ—á–Ω–æ / –ø–æ ID —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
async def cb_cast_prompt(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    await _safe_edit_text(
        call.message,
        "–ü—Ä–∏—à–ª–∏ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É:\n<code>/cast &lt;id1,id2,...&gt; —Ç–µ–∫—Å—Ç</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/cast 123,456 –û–±–Ω–æ–≤–∏–ª–∏ –±–æ—Ç–∞ ‚Äî —Ç–µ–ø–µ—Ä—å –±—ã—Å—Ç—Ä–µ–µ!</code>\n"
        "–û—Ç–º–µ–Ω–∞: /cancel",
        parse_mode="HTML",
    )
    await call.answer()

async def cast_cmd(message: types.Message):
    if not _guard(message.from_user.id): return
    if not message.text.startswith("/cast "):
        return
    try:
        _, rest = message.text.split(" ", 1)
        ids_str, text = rest.split(" ", 1)
        ids = [int(x) for x in ids_str.split(",") if x.strip().isdigit()]
    except Exception:
        await message.reply("–§–æ—Ä–º–∞—Ç: /cast <id1,id2,...> <—Ç–µ–∫—Å—Ç>")
        return

    ok = fail = 0
    for uid in ids:
        try:
            await message.bot.send_message(uid, text, parse_mode="HTML", disable_web_page_preview=True)
            ok += 1
        except Exception:
            fail += 1
        await asyncio.sleep(0.05)
    await message.reply(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {fail}")

# -------- –±—ç–∫–∞–ø –ë–î --------
async def cb_backup(call: types.CallbackQuery):
    if not _guard(call.from_user.id): return
    ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    out = Path(f"backups/botdb_{ts}.zip")
    try:
        z = make_sqlite_backup(out)
        await call.message.reply_document(InputFile(z), caption=f"–ë—ç–∫–∞–ø {z.name}")
    except Exception as e:
        await call.message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø: {e}")
    await call.answer("–ì–æ—Ç–æ–≤–æ")

# -------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è --------
def register(dp: Dispatcher):
    # –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
    dp.register_message_handler(admin_home, commands=["admin"])
    dp.register_message_handler(admin_home, lambda m: m.text in {"üõ† –ê–¥–º–∏–Ω", "–ê–¥–º–∏–Ω"}, state="*")

    # —Å–ø–∏—Å–æ–∫/–∫–∞—Ä—Ç–æ—á–∫–∏/–ø—Ä–∞–≤–∫–∏
    dp.register_callback_query_handler(cb_admin_home, lambda c: c.data == "admin_home")
    dp.register_callback_query_handler(cb_users, lambda c: c.data and c.data.startswith("admin_users:"))
    dp.register_callback_query_handler(cb_user,  lambda c: c.data and c.data.startswith("admin_user:"))
    dp.register_callback_query_handler(cb_unlim, lambda c: c.data and c.data.startswith("admin_unlim:"))
    dp.register_callback_query_handler(cb_credit, lambda c: c.data and c.data.startswith("admin_credit:"))

    # —Ä–∞—Å—Å—ã–ª–∫–∏
    dp.register_callback_query_handler(cb_cast_menu,  lambda c: c.data == "admin_cast")
    dp.register_callback_query_handler(cb_cast_all,   lambda c: c.data == "admin_cast_all")
    dp.register_callback_query_handler(cb_cast_prompt,lambda c: c.data == "admin_cast_prompt")
    dp.register_callback_query_handler(cb_cast_user,  lambda c: c.data and c.data.startswith("admin_cast_user:"))
    dp.register_message_handler(catch_reply_broadcast_all, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(catch_reply_cast_user,     content_types=types.ContentTypes.TEXT)

    # –∫–æ–º–∞–Ω–¥–∞ —Ç–æ—á–µ—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    dp.register_message_handler(cast_cmd, commands=["cast"])

    # –±—ç–∫–∞–ø
    dp.register_callback_query_handler(cb_backup, lambda c: c.data == "admin_backup")
